# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include .idea/directory in the project.
.idea/

# VS Code
.vscode/
*.code-workspace

# Vim/Neovim
*.swp
*.swo
*~
.netrwhist

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Operating System Files
# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
*.tmp
*.bak
*.swp
*~.nib
*.lnk

# Project-specific excludes
# 
# Strategy:
# - Track reference problems (problems/tsplib95/) for reproducible benchmarks
# - Ignore generated solutions and random problems to keep repo clean
# - Allow tracking of custom problems if needed (problems/custom/ can be committed manually)
#
# Generated solutions and heuristic tours
solutions/simple/
# solutions/exact/  # Keep exact solutions for critical tests
solutions/custom/
solutions/lin_kernighan/

# Generated random TSP instances (keep tsplib95 problems tracked)
problems/random/
problems/custom/

# Keep important reference problems but exclude generated ones
!problems/tsplib95/

# Performance test outputs
performance_results.txt
performance_plots/

# TSP file patterns - uncomment to exclude all TSP files
# *.tsp
# *.opt.tour
# *.tour

# But always exclude temporary test files
*test*.tsp
*test*.opt.tour
*test*.tour
rand*.tsp
rand*.opt.tour
random*.tsp
random*.opt.tour

# Temporary output files
output/
temp/
tmp/

# Development and testing files
*_test_*
*_temp_*
scratch/
experiments/

# Profiling data
*.prof
*.profile

# Timing and benchmark data
benchmark_*.txt
timing_*.csv
results_*.json

# Log files
*.log
logs/

# Backup files
*.backup
*.orig

# Generated documentation
docs/_build/
docs/html/
docs/latex/

# Matplotlib figure cache
.matplotlib/